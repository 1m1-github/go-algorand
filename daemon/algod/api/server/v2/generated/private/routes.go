// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
