// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
