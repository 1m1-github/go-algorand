// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"vrG0AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
