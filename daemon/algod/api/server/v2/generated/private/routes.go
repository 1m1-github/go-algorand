// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"bouuPl393wAAAP//BZowNibBAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
