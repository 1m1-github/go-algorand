// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
