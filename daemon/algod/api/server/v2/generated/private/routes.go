// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
