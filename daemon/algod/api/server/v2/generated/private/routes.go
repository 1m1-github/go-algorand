// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"46d6cT7XB7NbpOtP1/8/AAD//+VQcAsKtAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
